==================================================What is the difference between C and C++?

C does not support Object Oriented Programming

-----

#include <studio.h>

int main() {
  printf("Hello World!");
  return 0;
}

-----

==================================================C Syntax


Line 1: #include <stdio.h> is a header file library that lets us work with input and output functions, such as printf(). Header files add functionality to C programs.

Line 2: A blank line. C compilers ignores blank lines. But we use it to make the code more readable.

Line 3: Another thing that always apper in a C program is main(). This is called a function. Any code inside its curly brackets {} will be executed;

Line 4: printf() is a function used to output/print text to the screen.


-----


***NOTE: Every C statement ends with a semicolon ;

***NOTE: The body of int main() could also been written as:

  int main() {printf("Hello World!"); return 0;}

REMEMBER: The compiler ignores white spaces. However, multiple lines makes the code more readable.

Line 5: return 0 ends the main() function.

Line 6: Do not forget to add the closing curly brackets } to actually end the main function.


==================================================C Statements


A computer program is a list of "instructions" to be "executed" by a computer.

I a programming language, theses programing instrucitions are called statements.

The following statement "instructs" the compiler to print the text "Hello World" to the screen:

printf("Hello World!");

***You'll always end the statement with a semicolon ;

If you forget the semicolon (;), an error will occur and the program will not run:

printf("Hello World!")

error: expected ';' before 'return'

-----

=============================Many Statements


Most C programs contain many statements.

The statement are executed, one by one, in the same order as they are written:

printf("Hello World!");
printf("Have a good day!");
return 0;

==================================================C Output (Print Text)


To output values or print text in C, you can use the printf() function:

-----

#include <studio.h>

int main() {
  printf("Hello World!");
  return 0;
}

-----

==========Double Quotes


When we are working with text, is must be wrapped inside double quotations marks ""

If you forget the double quotes, an error occurs:

printf("This sentence will work!");

printf(This sentence will return an error.);


==========Many printf() Functions


We can use as many printf() functions as you want. However, note that it does not insert a new line at the end of the output:

-----

#include <stdio.h>

int main() {
  printf("Hello World!");
  printf("I am learning C.");
  printf("And it is awesome!");
  retunr 0;
}

-----


==========New Lines


To insert a new line, we can use the \n character:

-----

#include <stdio.h>

int main() {
  printf("Hello World!\n");
  printf("I am learning C.");
  return 0;
}

-----


==========Multiple Lines With a Single printf() Function


We also can output multiple lines with a single printf() function. However, this could make the code hard to read:

-----

#include <stdio.h>

int main() {
  printf("Hello World!\nI am learning C.\nAnd it is awesome!");
  return 0;
}

-----

***TIP: Two \n characters after each other will create a blank line:

-----

#include <stdio.h>

int main() {
  printf("Hello World!\n\n");
  printf("I am learning C.");
  return 0;
}

-----



***What is \n exactly?

The new line character (\n) is called an escpae sequence, and it forces the cursor to change its position to the beginning of the next line on the screen. This results in a new line.

Examples of other valid escape sequence are:

	===================================================================|
	| Escape character		Result		Description	   |
	|------------------------------------------------------------------|
	|	\'			   '		Single quote	   |
	|------------------------------------------------------------------|
	|	\"			   "		Double quote	   |
	|------------------------------------------------------------------|
	|	\\			   \		Backslash	   |
	|------------------------------------------------------------------|
	|	\?			   ?		Interrogation	   |
	|------------------------------------------------------------------|
	|	\123		    Octal ASCII 123	Octal 123 ASCII	   |
	|------------------------------------------------------------------|
	|	\X12			Hex.D. 12	Hex.D. 12 ASCII	   |
	|------------------------------------------------------------------|
	|	%%			   %		Percentage	   |
	|------------------------------------------------------------------|



==================================================C INPUTS (Scan Text)


==========User Input

We have already learned that printf() is used to output values in C.

To get user input, we can use use the scanf() function:


The example below outputs a number entered by the user:

-----

// Create an integer variable that will store the number we get from the user
int myNum;

// Ask the user to type a number
printf("Type a number: \n");

// Get and save the number the user types
scanf("%d", &myNum);

// Output the number the user typed
printf("Your number is: %d", myNum);

-----

***NOTE: The scanf() function take two arguments: the format specifier of the variable (%d in the example above)
and the reference operator (&myNum), which stores the memory address of the variable.


==================================================C MULTIPLE INPUTS (Scan Text)

==========Multiple Inputs

The scanf() function also allow multiple inputs (an integer and a character in the following example):

-----

// Create an int and a char variable
int myNum;
char myChar;

// Ask the user to input two values: a number and a character
printf("Enter a number and a letter: ");

// Get and sabe the number AND character
scanf("%d %c", &myNum, &myChar);

// Print the number
printf("Your number is: %d\n", myNum);

//Print the character
printf("Your letter is: %c\n", myChar);

-----


==========Take String Input


We can also get a string entered by the user:

----

This example output the name of a user:

// Create a string
char firstName[30];

// Ask the user to input some text
printf("Enter your first name: \n");

// Get and save the next
scanf("%s", firstName);

// Output the text
printf("Hello %s", firstName);

-----

***NOTE: When working with strings in scanf(), you must specify the size of the string/array (we used very high number, 30 in our example, but atleast then we are certain it will store enough characters for the first name), and you don't have to use the reference operator (&).



However, the scanf() function has some limitations: it considers space (whitespace, tabs, etc) as a terminating character, which means that it can only display a single word (even if you type many words.) For example:

-----

char fullName[30];

printf("Type your full name: \n");
scanf("%s", &fullName);

printf("Hello %s", fullName);

// Type your full name: John Doe
// Hello John

-----

From the example above, you would expect the program to print "John Doe", but it only prints "John".

That's why, when working with strings, we often use fgets() function to read a line of text. Note that you must include the following arguments: the name of the string variable, sizeof(string_name), and stdin:

-----

char fullName[30];

printf("Type your full name: \n");
fgets(fullName, sizeof(fullName), stdin);

printf("Hello %s", fullName);

// Type your full name: John Doe
// Hello John Doe

-----


***NOTE: Use the scanf() function to get a single word as input, and use fgets() for multiple words.


==================================================C Comments

Comments can be used to explain code, and to make it more readable. It can also be used to prevent execution when testing alternative code.

Comments can be singeld-lined or multi-lined.

//Single-lined comment

/*Multi-lined
comment */

The structure of comments is the same for C and C++

GOOD TO KNOW: Before version C99 (Released in 1999), you could only use multi-line comments in C.

==================================================C Variables

Creating variables:

int myNum = 10;

float myFloatNum = 3.14; 

char myChar = 'R';

datatype variableName = value;



==========Output Variables


To output a variable in C you must use a format specifier for the data type:

A format specifier starts with a % sign, followed by a character.

To output the value of an int variable, we use the %d data type specifier sorrounded by double quotes ("%d") inside printf() function:

int myNum = 15;

printf(myNum); //Will produce an error.

printf("%d", myNum); //Outputs 15

Those are the format specifier to each data type:

%c for char
%f for float