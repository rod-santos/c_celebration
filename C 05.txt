=========================================================== C Constants

If you don't want others (por yourself) to change existing variable values, you can use the const keyword.

This will declare the variable as "constant", which means unchangeable and read-only:

Ex:

const int myNum = 15; // myNum will always be 15
myNum = 10; // error: assignment of read-only variable 'myNum'

We should always declare the variable as constant when you have values that are unlikely to change:

const int minutesPerHour = 60;
const float PI = 3.14;



==========Notes On Constants



When we declare a constant variable, it must be assigned with a value:

Ex:

const int minutesPerHour;
minutesPerHour = 60; // error



==========Good Pratice



Another thing about constant variables, is that it is considered good pratice to declare them with uppercase.

It is not required, but useful for code readability and common for C programmers:

const int BIRTHYEAR = 1980;



=========================================================== C OPERATORS


Operators are used to perform operations on variables and values.

In the example below, we use the + operator to add together two values:

Ex:

int myNum = 100 + 50;



Although the + operator is ofter used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and another variable:


Ex:
-----

int sum1 = 100 + 50;     // 150 (100 + 50)
int sum2 = sum1 + 250;   // 400 (150 + 250)
int sum3 = sum1 + sum2;  // 800 (400 + 400)

-----


C divides the operators into the following groups:

	* Arithmetic operators
	* Assignment operators
	* Comparison operators
	* Logical operators
	* Bitwise operators



=====Arithmetic Operators


	***Arithmetic operators are used to perform commom mathematical operations.

====================================================================================================
|												   |
| Operator	Name			Description					Example	   |
| 												   |
| +		Addition		Adds together two values			x + y	   |
| -		Subtraction		Subtracts one value from another		x - y	   |
| *		Multiplication		Multiplies two values				x * y	   |
| /		Division		Divides one value by another			x / y	   |
| %		Modulus			Returns the division remainder			x % y	   |
| ++		Increment		Increases the value of a variable by 1	      ++x | x++    |
| --		Decrement		Decreases the value of a variable by 1	      --x | x--	   |
|__________________________________________________________________________________________________|



==========Assignment Operators


Assignment operators are used to assign values to variables.

In the exemple below, we use the assignment operator (=) to assign the value 10 to a variable called x:


Ex:
-----

int x = 10;

-----


The "addition assignment" operator (+=) adds a value to a variable:


Ex:
-----

int x = 10;

x += 5;

-----

	***A list of all assignment operators:


|=======================================================|
| Operator		Example		Same As		|
|							|
|							|
|   =			x = 5		x = 5		|
|   +=			x += 3		x = x + 3	|
|   -=			x -= 3		x = x - 3	|
|   *=			x *= 3		x = x * 3	|
|   /=			x /= 3		x = x / 3	|
|   %=			x %= 3		x = x % 3	|
|   &=			x &= 3		x = x & 3	|
|   |=			x |= 3		x = x | 3	|
|   =^			x =^ 3		x = x ^ 3	|
|   >>=			x >>= 3		x = x >> 3	|
|   <<=			x <<= 3		x = x << 3	|
|							|
=========================================================



==========Comparison Operators



Comparison operators are used to compare two valuer (or variables). This is important in programming, because it helps us to find answers and make decisions.

The return of a comparison is either 1 or 0, which means true (1) or false (0). These values are known as Boolean values, and we will learn more about them in the Booleans and If..Else chapter.

In the following exemple, we use the greater than operator (>) to find out if 5 is greater than 3:

Ex:

int x = 5;
int y = 3;
printf("%d", x > y); // Returns 1 (true) because 5 is greater than 3.



	***A list of all comparison operators:


|==========================================================================================================|
| Operator	  Name				Example		Description				   |
|													   |
|   ==		Equal to			x == y		Returns 1 if the values are equal	   |
|													   |
|   !=		Not equal			x != y		Returns 1 if the values are not equal	   |
|													   |
|   >		Greater than			x > y		Returns 1 if the first value is greater	   |	
|								than the second value			   |
|													   |
|   <		Less than			x < y		Returns 1 if the first value is less	   |
|								than the second value			   |
|													   |
|   >=		Greater than or equal to	x >= y		Returns 1 if the first value is greater	   |
|								than, or equal to, the second value	   |
|													   |
|   <=		Less than or equal to		x <= y		Returns 1 if the first value is less	   |	
|								than, or equal to, the second value	   |
=============================================================================================================



==========Logical Operators



We can also test for true or false values with logical operators.

Logical operators are used to determine the logic between variables or values, by combining multiple conditions:


==============================================================================================================
| Operator		Name		   Example			Description			     |	
|													     |
|   &&			AND		x < && x < 10		Returns 1 if both satements are true	     |
|													     |
|   ||			OR	        x < 5 || x < 4		Returns 1 if one of the satatements is true  |
|													     |
|   !			NOR	      !(x < 5 && x < 10)	Reverse the result, return 0 if the result   |
|								is 1					     |
==============================================================================================================





=========================================================== C Booleans



Very often, im programming, we will need a data type that can only have two values, like:

	* YES / NO
	* ON / OFF
	* TRUE / FALSE

For this, C has a bool data type, which is known as booleans.

Booleans represent values that are either true of false.



Boolean Variables

In C, the bool type is not built-in data type, like int or char.

It was introduced in C99, and you must import the following header file to use it:

#include <stdbool.h>

A boolean variable is declared with the bool keyword and can take values true or false:

bool isProgrammingFun = true;
bool isFishTasty = false;


Before trying to print the boolean variables, you should know that boolean values are returned as integers:

	* 1 (or any other number that is not 0) represent true 
	* 0 represents false

Therefore, we must use the %d format specifier to print a boolean value:

Ex:

// Create boolean variables
bool isProgrammingFun = true;
bool isFishTasty = false;

//Return boolean values
printf("%d", isProgrammingFun);		// Returns 1 (true)
printf("%d", isFishTasty);		// Retruns 0 (false)

However, it is more commom to return a boolean value by comparing values and variables.



=====Comparing Values and Variables

Comparing values are useful in programming, because it helps us to find answers and make decisions.

For example, we can use a comparison operator, sucha as the greater than (>) operator, to compare two values:

Ex:

printf("%d", 10 > 9);		// Returns 1 (true) because 10 is greater than 9

From the example above, you can see that return value is a boolean value (1).


We can also compare two variables:


Ex:
-----

int x = 10;
int y = 9;
printf("%d", x > y);

-----

In the example below, we use equal to (==) operator to compare different values:

Ex:

printf("%d", 10 == 10);		// Returns 1 (true), because 10 is equal to 10
printf("%d", 10 == 15);		// Returns 0 (false), because 10 is not equal to 15
printf("%d", 5 == 55);		// Returns 0 (false), becuase 5 is not equal to 55


We are not limited to only compare numbers. You can also compare boolean variables, or even special structures, like arrays (which we will learn more about further):

Ex:

bool isHamburguerTasty = true;
bool isPizzaTasty = true;

// Find out if both hamburguer and pizza is tasty
printf("%d", isHamburguerTasty == isPizzaTasty);


***Remember to include the <stdbool.h> header file when working with bool variables.